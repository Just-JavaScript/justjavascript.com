@tailwind base;

@tailwind components;

@tailwind utilities;

/*
  Hide the focus indicator if the element receives focus via the mouse,
  but it will still show up on keyboard focus. 
  */

.js-focus-visible :focus:not(.focus-visible) {
  outline: none;
}

::selection {
  @apply bg-yellow-200 text-black;
}

/* START — @reach/menu-button */

/* Used to detect in JavaScript if apps have loaded styles or not. */
:root {
  --reach-menu-button: 1;
}

[data-reach-menu],
[data-reach-menu-popover] {
  display: block;
  position: absolute;
}

[data-reach-menu][hidden],
[data-reach-menu-popover][hidden] {
  display: none;
}

[data-reach-menu-list],
[data-reach-menu-items] {
  @apply block border bg-white border-gray-200 rounded-lg shadow-md py-1 outline-none;
}

[data-reach-menu-item] {
  display: block;
  user-select: none;
}

/*
 The dom structure of a MenuLink is reach-menu-item > a,
 so to target all items we can use `data-reach-menu-item`
*/
[data-reach-menu-item] {
  /*
    These are styled in one rule instead of something like a[data-reach-menu-item]
    and li[data-reach-menu-item] so that apps don't have to fight specificity and
    can style both li and a menu items with one rule,
    ie: `[data-selected] { background: red; }`.
    Otherwise they'd have to define two styles, one for a and one for li.
  */

  /* reach-menu-item */
  cursor: pointer;

  /* a */
  display: block;
  color: inherit;
  font: inherit;
  text-decoration: initial;

  /* both */
  padding: 5px 20px;
}

/* pseudo pseudo selector */
[data-reach-menu-item][data-selected] {
  @apply bg-gray-200 outline-none;
  /* background: hsl(211, 81%, 36%); */
  /* color: white; */
  /* outline: none; */
}

/* END — @reach/menu-button */

/* ReachUI */
@import '@reach/tooltip/styles.css';
@import '@reach/dialog/styles.css';
@import './fonts/index.css';
