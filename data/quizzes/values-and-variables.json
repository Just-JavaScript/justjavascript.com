{
  "title": "JJS 03 Values and Variables",
  "slug": "values-and-variables",
  "id": "values-and-variables",
  "imageUrl": "https://res.cloudinary.com/dg3gyk0gu/image/upload/v1612887329/just-javascript-email-images/jj03/jjs-03-module-picture.png",
  "questions": [
    {
      "__typename": "EssayQuestion",
      "id": "ckksrck08114q0930w6pm9y7f",
      "title": "JJS 03 01 numberOfTentacles code",
      "prompt": "# What happens if we run this code?\n\nIs this code valid? Why or why not?\n\n```js\nlet numberOfTentacles = 10;\nnumberOfTentacles = 'eight';\nconsole.log(typeof(numberOfTentacles));\n```",
      "answer": {
        "description": "**Yes, it’s valid. It prints \"string\" to the console.**\n\nVariables don’t have types in JavaScript — only values do. The answer to typeof(numberOfTentacles) depends on **which value** the variable was pointing to at that time.\n\nThe numberOfTentacles variable was pointing to \"eight\" string value at the time we asked about its type. So we got \"string\" as a result.",
        "title": "JJS 03 01 Answer"
      }
    },
    {
      "__typename": "EssayQuestion",
      "id": "ckksrl6yo11qc0930mgox1bi3",
      "title": "JJS 03 02 numberOfTentacles output",
      "prompt": "# Here's a slightly different example. What happens if we run it?\n\nIs there a difference in behavior compared to the last snippet? Explain why or why not using our mental model.\n\n```js\nlet numberOfTentacles = 10;\nconsole.log(typeof(numberOfTentacles);\nnumberOfTentacles = 'eight';\n```",
      "answer": {
        "description": "**Yes, there is a difference. It prints \"number\" to the console.**\n\nVariables don’t have types in JavaScript — only values do. The answer to typeof(numberOfTentacles) depends on **which value** the variable was pointing to at that time.\n\nThe numberOfTentacles variable was pointing to 10 number value at the time we asked about its type. So we got \"number\" as a result.",
        "title": "JJS 03 02 Answer"
      }
    },
    {
      "__typename": "EssayQuestion",
      "id": "ckksrqleo12od0a80v57ng7q9",
      "title": "JJS 03 03 answer.opposite",
      "prompt": "# What happens if we run this code?\n\nExplain why using our mental model.\n\n```js\nlet answer = true;\nanswer.opposite = false;\nconsole.log(answer.opposite);\n```",
      "answer": {
        "description": "**This code won’t be able to set a property.**\n\nBooleans are primitive. And primitive values are immutable. We can’t change them — and setting a property on a value is a change.\n\nIf our code runs in the [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode), assigning a property on a primitive value would lead to an error. Otherwise, it will silently do nothing. In either case, we can’t set a property on a boolean value like _true_.",
        "title": "JJS 03 03 Answer"
      }
    },
    {
      "__typename": "EssayQuestion",
      "id": "ckksrv0cw12gw0930ayqw61qr",
      "title": "JJS 03 04 null equals 10",
      "prompt": "# What happens if we run this code?\n\nExplain why using our mental model.\n\n```js\nnull = 10;\nconsole.log(null);\n```",
      "answer": {
        "description": "**This code produces an error.**\n\nIt is an error because the left side of the assignment must always be a “wire”. Variables are “wires”, so they can appear on the left side. A literal like _null_ is not a “wire”, so trying to assign something to it is meaningless.",
        "title": "JJS 03 04 Answer"
      }
    },
    {
      "__typename": "QuestionSet",
      "id": "ckl87mapcj3g209698xmzacc3",
      "title": "JJS 03 05 Answer this multi-part question",
      "questions": [
        {
          "__typename": "SketchQuestion",
          "id": "ckl87xdmgj2yx0a26quag1f5c",
          "title": "JJS 03 05 01 sketch",
          "prompt": "## Sketch a diagram of variables and values after this snippet of code runs. Use our mental model.\n\n```js\nlet it = 'be';\nlet them = 'eat cake';\nit = them;\n```",
          "answer": null
        },
        {
          "__typename": "MultipleChoiceQuestion",
          "id": "ckkokz3qwallf0c769c5jlhpi",
          "title": "JJS 03 05 02 Which Matches Your Sketch",
          "prompt": "# Which one of these diagrams best matches your sketch and our mental model after that code runs?",
          "canComment": true,
          "commentPrompt": "You’ve chosen a particular diagram for our mental model. Did you notice **anything wrong** about the other diagrams?",
          "answer": {
            "description": "**Diagram B is correct.** It shows both variables pointing at the same \"eat cake\" string value.\n\nDiagram A doesn’t match the mental model we’re building. It shows values inside variables, but in our mental model variables point to values.\n\nDiagram C is wrong because it shows a variable pointing to another variable. Variables can only point to values, not to other variables.\n\nDiagram D is wrong for both of the same reasons."
          },
          "choices": [
            {
              "id": "ckkol31q0and00a81ouq2i33x",
              "value": "jjs-03-05-a",
              "label": "A",
              "imageUrl": "https://res.cloudinary.com/dg3gyk0gu/image/upload/v1612305600/just-javascript-email-images/jj03/quiz%20images/01%20eat%20cake.png"
            },
            {
              "id": "ckkol6qfsaoj70a85rggdp959",
              "value": "jjs-03-05-b",
              "label": "B",
              "imageUrl": "https://res.cloudinary.com/dg3gyk0gu/image/upload/v1612305624/just-javascript-email-images/jj03/quiz%20images/B%20eat%20cake.png"
            },
            {
              "id": "ckkol78ygambb0c76muwh8geu",
              "value": "jjs-03-05-c",
              "label": "C",
              "imageUrl": "https://res.cloudinary.com/dg3gyk0gu/image/upload/v1612305642/just-javascript-email-images/jj03/quiz%20images/03%20eat%20cake.png"
            },
            {
              "id": "ckkol7jrcaolc0a855dcj8lbi",
              "value": "jjs-03-05-d",
              "label": "D",
              "imageUrl": "https://res.cloudinary.com/dg3gyk0gu/image/upload/v1612305661/just-javascript-email-images/jj03/quiz%20images/04%20eat%20cake.png"
            }
          ],
          "correctChoices": [
            {
              "id": "ckkol6qfsaoj70a85rggdp959",
              "value": "jjs-03-05-b",
              "label": "B",
              "imageUrl": "https://res.cloudinary.com/dg3gyk0gu/image/upload/v1612305624/just-javascript-email-images/jj03/quiz%20images/B%20eat%20cake.png"
            }
          ]
        }
      ]
    },
    {
      "__typename": "EssayQuestion",
      "id": "ckkssthvc14v60930eho1woxj",
      "title": "JJS 03 07 feed pets",
      "prompt": "This code prints **_\"T\"_** to the console. The **_feed_** function is written by our colleague **in another file.** We don't know what it does.\n\n```js\nlet pets = 'Tom and Jerry';\nfeed(pets);\nconsole.log(pets[0]);\n```",
      "answer": {
        "description": "**No, our colleague cannot make this code log something other than _\"T\"_.**\n\nThis is because when we call a function, we always pass a value, not a variable. We’re passing a string value — and **strings, like any primitives, are immutable.** Our colleague can’t mess with the \"Tom and Jerry\" string value, so its first character will always be _'T'_.",
        "title": "JJS 03 07 Answer"
      }
    },
    {
      "__typename": "EssayQuestion",
      "id": "ckkssz6cg14u90932v59ech8m",
      "title": "JJS 03 08 What does feed do",
      "prompt": "This code prints **_\"Tom\"_** to the console. The **_feed_** function is written by our colleague **in another file.** We don't know what it does.\n\n```js\nlet pets = ['Tom', 'Jerry'];\nfeed(pets);\nconsole.log(pets[0]);\n```",
      "answer": {
        "description": "**Yes, our colleague can make this code log something other than _\"Tom\"_.**\n\nNote that our colleague can’t change which value our variable points to. We pass a value — not a variable! However, our colleague can affect the array value itself, and change its elements.\n\nThis is because **arrays, unlike strings, are mutable.** They are not primitive values — they are objects! In case you forget, here is a reminder of which values are primitive. Anything not on this list is an object, and our colleague can affect it.",
        "title": "JJS 03 08 Answer"
      }
    }
  ]
}
