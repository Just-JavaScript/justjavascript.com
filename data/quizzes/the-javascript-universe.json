{
  "title": "JJS 02 The JavaScript Universe",
  "slug": "the-javascript-universe",
  "id": "the-javascript-universe",
  "questions": [
    {
      "__typename": "EssayQuestion",
      "id": "ckkok86m0ajy70a81e2hpxw8n",
      "title": "JJS 02 01 typeof",
      "prompt": "## Open some JavaScript code that you have been working on and put **`console.log(typeof(something))`** in it, replacing something with different variables in your code.\n\nWhich value types did you manage to find an example for? Try to “collect” as many types as you can."
    },
    {
      "__typename": "EssayQuestion",
      "id": "ckkokcd2oaiu50c769jseiw8r",
      "title": "JJS 02 02 typeof data",
      "prompt": "# Imagine you see some code that checks whether a value is a date: **`typeof(value) === 'date'`**\n\nWill this code work? Why or why not?"
    },
    {
      "__typename": "EssayQuestion",
      "id": "ckkooyd5kauhv0c76v6wrxf5x",
      "title": "JJS 02 03 typeof bug",
      "prompt": "# One of the values mentioned in this module “lies” about its type. Concretely, typeof will return an incorrect answer for it because of a JavaScript bug that is now too late to fix. \n\n### Primitive Values\n- **Undefined** (`undefined`), used for unintentionally missing values.\n- **Null** (`null`), used for intentionally missing values.\n- **Booleans** (`true` and `false`), used for logical operations.\n- **Numbers** (`-100`, `3.14`, and others), used for math calculations.\n- **Strings** (`\"hello\"`, `\"abracadabra\"`, and others), used for text.\n- **Symbols** (uncommon), used to hide implementation details.\n- **BigInts** (uncommon and new), used for math on big numbers.\n\n### Objects and Functions\n- **Objects** (`{}` and others), used to group related data and code.\n- **Functions** (`x => x * 2` and others), used to refer to code.\n\n### Do you know which value it is? You can find this value by trying typeof for each example in our list of nine types.",
      "answer": {
        "description": "**null is the value that \"lies\" about its type.**\n\nConcretely, typeof(null) is \"object\" even though null is not an object. Null is a primitive value. (Here’s a historical note on how that happened.) This is a very old bug in JavaScript. It cannot be fixed because it would break existing websites.\n\nYou might ask: isn’t typeof([]) === \"object\" a bug? No. Arrays aren’t primitive, so they are objects! Unlike null, they’re telling the truth.",
        "title": "JJS-02-03 Answer"
      }
    },
    {
      "__typename": "EssayQuestion",
      "id": "ckkop8508ava60c76vyo9ka6p",
      "title": "JJS 02 04 typeof value answers",
      "prompt": "# No matter what **value** we pick, we know that **`typeof(value)`** can only give us one of the several predetermined answers.\n\nIs there anything similarly interesting that we can say about **`typeof(typeof(value))`**?",
      "answer": {
        "description": "**typeof(typeof(value)) is always \"string\".**\n\nHere’s why. We know typeof(value) always gives us one of the predetermined strings: \"undefined\", \"boolean\", \"number\", and so on. Predetermined strings.\n\nSo typeof any of them is \"string\". Because they’re strings!",
        "title": "JJS 02 04 Answer"
      }
    },
    {
      "__typename": "EssayQuestion",
      "id": "ckkopbp3cavk40c76xki33m8u",
      "title": "JJS 02 05 What do you think",
      "prompt": "# Tell me what you think of this module and **Just JavaScript** so far.\n\nWas anything particularly insightful? Or confusing? I want to know!\n\nThere's no character limit for this question. I personally read every response, whether it's a few words or many paragraphs.\n\nIf you don't like typing in a form, please feel free to reply to my email directly. Your feedback keeps this course going.\n\nCheers,\nDan",
      "answer": null
    }
  ]
}
